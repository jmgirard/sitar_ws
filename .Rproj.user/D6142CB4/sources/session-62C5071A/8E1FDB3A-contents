---
format: 
  revealjs:
    css: styles.css
    slide-number: true
    show-slide-number: all
    preview-links: auto
    self-contained: true
    progress: true
    history: true
    hash-type: number
    theme: default
    code-block-background: true
    highlight-style: zenburn
    code-link: false
    code-copy: true
    pagetitle: "Circumplex Tutorial"
    author-meta: "Jeffrey Girard"
    date-meta: "2022-07-25"
---

::: {.my-title}
# [Introduction to R]{.blue} <br />and {circumplex}

::: {.my-grey}
[SITAR 2022 | 2022-07-30]{}<br />
[Jeffrey Girard | Univ. of Kansas]{}
:::

![](programmer_357EDD.svg){.absolute bottom=0 right=0 width=400}
:::

# Overview

## Instructor {.smaller}

::: {.columns .pv4}
::: {.column width="30%"}
::: {.tc}
![](Girard_500x500.jpg){.br-100}

**Jeffrey Girard**, PhD<br /> [www.jmgirard.com](https://www.jmgirard.com)<br /> [jmgirard\@ku.edu](mailto:jmgirard@ku.edu)
:::
:::

::: {.column width="10%"}
:::

::: {.column width="60%"}
::: {.fragment}
#### Background

-   [Assistant Professor]{.b .green}, *University of Kansas*
-   Research Postdoc, *Carnegie Mellon University*
-   PhD Student, *University of Pittsburgh*
:::
::: {.fragment .mt1}
#### Research Areas

-   Psychological Assessment
-   Affective/[Interpersonal]{.b .green} Communication
-   Applied [Statistics]{.b .green} and Machine Learning
-   [Data Science]{.b .green} and Software Engineering
:::
:::
:::

::: footer
Overview
:::

## R Rationale {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
1.  Think of your [computer]{.b .blue} as the [engine]{.b .green} of a car
    -   It provides raw power for computation

::: {.fragment .mt1}
2.  The [R language]{.b .blue} is like the [controls]{.b .green} for the car
    -   It lets you apply and direct that power
:::

::: {.fragment .mt1}
3.  [RStudio]{.b .blue} is like a fancy [dashboard]{.b .green} for the car
    -   It adds extra information and convenience
:::

::: {.fragment .mt1}
4.  An [R package]{.b .blue} is like an [add-on]{.b .green} for the car
    -   It adds new features and capabilities
:::
:::

::: {.column .tc .pv5 .relative width="40%"}
{{< li zvoyghpz trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}
:::
:::

::: footer
Overview
:::

## Workshop Goals {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
-   This is a beginner-friendly workshop aimed at social scientists with little to no experience in R

::: {.fragment .mt1}
-   My goal is to "[grant your learner's permit]{.b .blue}"
    -   How to navigate around RStudio
    -   How to do calculations in R
    -   How to import data into R
:::

::: {.fragment .mt1}
-   I will introduce you to the [\{circumplex\}]{.b .blue} package
    -   How to score and norm an instrument
    -   How to use the Structural Summary Method
    -   How to generate tables and figures
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li avjivnej trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}
:::
:::

::: footer
Overview
:::

# Introduction to R

## Installing R {.smaller}

::: {.columns .pv4}
::: {.column .pr4 width="50%"}
#### Windows

1.  Open a web browser
2.  Visit [cloud.r-project.org](https://cloud.r-project.org)
3.  Click "Download R for Windows"
4.  Click the "base" subdirectory link
5.  Click "Download R-4.X.X" (e.g., 4.2.1)
6.  Run the downloaded .exe file
7.  Select all the default options
8.  Complete the installation wizard
:::

::: {.column width="50%"}
#### Mac OS

1.  Open a web browser
2.  Visit [cloud.r-project.org](https://cloud.r-project.org)
3.  Click "Download R for macOS"
4.  Click "R-4.X.X.pkg" (e.g., 4.2.1)
5.  Run the downloaded .pkg file
6.  Select all the default options
7.  Complete the installation wizard
:::
:::

::: aside
*Note.* You will need to repeat this process every time a new version of R is released.
:::

::: footer
Introduction to R
:::

## Installing RStudio {.smaller}

::: {.columns .pv4}
::: {.column .pr4 width="50%"}
#### Windows

1.  Open a web browser
2.  Visit [rstudio.com/download](https://www.rstudio.com/products/rstudio/download/){preview-link="false"}
3.  Scroll down until you find the table<br />under the "**All Installers**" section
4.  Find the row for "Windows 10/11"
5.  Click "RStudio-2022.XX.X-XXX.exe"
6.  Run the downloaded .exe file
7.  Select all the default options
8.  Complete the installation wizard
:::

::: {.column width="50%"}
#### Mac OS

1.  Open a web browser
2.  Visit [rstudio.com/download](https://www.rstudio.com/products/rstudio/download/){preview-link="false"}
3.  Scroll down until you find the table<br />under the "**All Installers**" section
4.  Find the row for "macOS 10.15+"
5.  Click "RStudio-2022.XX.X-XXX.dmg"
6.  Run the downloaded .dmg file
7.  Drag the RStudio icon to your<br />Applications folder (if you want)
:::
:::

::: aside
*Note.* You will need to repeat this process every time a new version of RStudio is released.
:::

::: footer
Introduction to R
:::

## RStudio Window {.smaller}

::: {.pv4}
![](rstudio_labels.jpg)
:::

::: aside
*Note.* You can customize RStudio (e.g., the fonts, color themes, and pane layout) under "Tools \> Global Options".
:::

::: footer
Introduction to R
:::

## R will Grant your Wishes {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
-   R is like a [well-meaning]{.b .green} but [overly literal]{.b .green} genie

    -   It has the power to grant almost any wish
    -   But we must phrase our wishes carefully!
    -   *We will always get what we ask for...*
    -   *...but not always what we wanted.*

::: {.fragment .mt1}
-   Mastering the [R language]{.b .blue} means learning...

    -   How to properly phrase commands
    -   How to decipher error messages
    -   How to view code from R's perspective
    -   How to detect and correct small mistakes
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li njhpxsof trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}
:::
:::

::: footer
Introduction to R
:::

## Console Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# Addition and Subtraction

10+3

10-3

10 + 3 # spaces are optional but recommended

10 - 3

# ==============================================================================

# Multiplication and Division

10 * 3 # correct

10 x 3 # error

10 / 3 # correct

10 \ 3 # error

# ==============================================================================

# Parentheses and Exponents

10 + 3 * 2

(10 + 3) * 2

10 ^ 2

10 ^ (1 / 2)

# ==============================================================================

# Negative and Large Numbers

10 + -30

9876543 # correct

9,876,543 # error

9 876 543 # error
```

::: footer
Introduction to R
:::

## Assignment {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
-   It is often useful to store data in [named objects]{.b .green}
    -   This makes the data easier to use and re-use
    -   This makes the code easier to write and read

::: {.fragment .mt1}
-   Which command is easier to follow?
    1.  Dial *7 8 5 8 6 4 0 8 4 1*
    2.  Call *Office Phone*
:::

::: {.fragment .mt1}
-   Named objects are created using [assignment]{.b .blue}
    -   Give a **name** then an **arrow** then the **data**
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li mgtgkkcb trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}

::: {.fragment}
`office <- 7858640841`
:::
:::
:::

::: footer
Introduction to R
:::

## Assignment Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# LESSON: Assigning and printing

x <- 2
x

# ==============================================================================

# USECASE: Using an object in math (a la algebra) 

x * 4

2 * 4

# ==============================================================================

# LESSON: You must use assignment to update an object

x

x + 1

x # still 2

x <- x + 1
x # updated to 3

# ==============================================================================

# USECASE: We can use the same object multiple times in a line

(10 + x - 1) / x

# ==============================================================================

# USECASE: We can also use an object to create another object

y <- 10 + x
y

# ==============================================================================

# USECASE: We can also use multiple objects in a line

y / x
```

::: footer
Introduction to R
:::

## Naming {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
-   Object names can [only include]{.b .blue}:
    -   Letters: `a-Z`
    -   Numbers: `0-9`
    -   Underscores: `_`
    -   Periods: `.`

::: {.fragment .mt1}
-   Additional Rules:
    -   Must [start with a letter or period]{.b .blue}
    -   Cannot contain spaces or dashes
    -   Cannot contain other symbols
    -   Names are case-sensitive (`age` â‰  `Age`)
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li efdggetp trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}
:::
:::

::: footer
Introduction to R
:::

## Naming Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# LESSON: Good names are a balancing act

x <- 93 # what is it?

rate <- 93 # too short

heart_rate_in_beats_per_minute <- 93 # too long

heart_rate_bpm <- 93 # just right

# ==============================================================================

# PITFALL: Don't try to include spaces or dashes in names

heart rate <- 93 # error

heart-rate <- 93 # error

# ==============================================================================

# PITFALL: Don't try to include special symbols

age@time2 <- 12 # error

age_time2 <- 12 # correct

# ==============================================================================

# PITFALL: Don't try to put a number or underscore first

heart_rate_1 <- 93 # correct

1_heart_rate <- 93 # error

_heart_rate <- 93 # error

# ==============================================================================

# LESSON: Object names are case-sensitive

heart_rate <- 93

Heart_rate <- 88

heart_rate # still 93

Heart_rate # a new object
```

::: footer
Introduction to R
:::

## Functions {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
-   [Recipes]{.b .green} allow chefs to cook up tasty treats
    -   Recipes call for ingredients
    -   Recipes involve one or more steps
    -   Steps transform ingredients into treats

::: {.fragment .mt1}
-   [Functions]{.b .blue} are like *customizable* recipes
    -   Functions call for inputs ("arguments")
    -   Functions involve one or more lines of code
    -   Code transforms inputs into outputs
    -   Using functions requires parentheses (usually)
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li vpqdjfdy trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}

::: {.fragment}
`out <- f(in1, in2)`
:::
:::
:::

::: footer
Introduction to R
:::

## Functions Live Coding

```{r}
#| echo: true
#| eval: false
#| code-line-numbers: false

# USECASE: Function can perform a task more easily and readably

# TEMPLATE: output <- function_name(input)

9 ^ (1 / 2)

x <- sqrt(9)
x

# ==============================================================================

# LESSON: We can also use functions to transform objects

y <- 9

sqrt(y)

# ==============================================================================

# LESSON: We can even use functions to transform the result of calculations

2 / 3

round(2 / 3)

# ==============================================================================

# LESSON: We can customize what a function does using arguments

# TEMPLATE: output <- function_name(argument, argument_name = argument_value)

round(2 / 3, digits = 2)

round(2 / 3, digits = 3)

# ==============================================================================

# LESSON: Some arguments are optional because they have default values

round(2 / 3) # the default value for digits is 0

round(2 / 3, digits = 0)
```

::: footer
Introduction to R
:::

## Strings {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
-   When talking to R, we need a way to distinguish
    -   Object/function names (e.g., the *mean* function)
    -   Text/character data (e.g., the word *mean*)
    
::: {.fragment .mt1}
-   [Strings]{.b .blue} are R's way of storing text data
    -   Strings can store any characters (no rules!)
    -   Strings are created and displayed with [quotes]{.b .green}
:::
::: {.fragment .mt1}
-   R has great tools for working with strings
    -   Strings can be collected into vectors
    -   Special functions can transform strings
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li xqnbvely trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}

::: {.fragment}
`name <- "John Doe"`
:::

:::
:::

::: footer
Introduction to R
:::

## Strings Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# USECASE: Strings are the main way to store character data in R
 
my_color <- red # error

my_color <- "red" # correct

# ==============================================================================

# USECASE: Strings can also store symbols not allowed in object names

dye <- "red#40"
dye

dyes <- c("red#40", "blue#02")
dyes

# ==============================================================================

# PITFALL: Many operations you can do to numbers won't work for strings

dyes + 1 # error

mean(dyes) # error

# ==============================================================================

# USECASE: But other operations work for both or even just for strings

length(dyes)

nchar(dyes)

dyes2 <- toupper(dyes)
dyes2
```

::: footer
Introduction to R
:::

## Packages {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
-   [Cookbooks]{.b .green} are a great way to learn to cook
    -   *They contain lots of recipes and instructions*
    -   Browse an online **bookstore** for a cookbook
    -   **Order** it to add it to your personal **bookshelf**
    -   To use, **pull** the cookbook off the shelf

::: {.fragment .mt1}
-   [Packages]{.b .blue} are like cookbooks for R
    -   *They contain helpful functions and datasets*
    -   Browse an online **repository** for a package
    -   **Install** it to add it to your personal **library**
    -   To use, **load** the package from the library
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li tboujdsn trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}

::: {.fragment}
`library("pkg_name")`
:::
:::
:::

::: footer
Introduction to R
:::

## Packages Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# USECASE: The stringr package adds a function to fix capitalization

students <- c("mary anne", "BENjamin", "Lee")

# ==============================================================================

# PITFALL: But we can't use that function without installing the package

str_to_title(students) # error

# ==============================================================================

# LESSON: Installing a package using RStudio

# - RStudio > Extras pane > Packages tab > Install button

# ==============================================================================

# PITFALL: We also need to load the package before we can use it

str_to_title(students) # error

# ==============================================================================

# LESSON: We load the package using library()

library("stringr")
str_to_title(students) #finally works!

# ==============================================================================

# LESSON: We can also keep our packages updated using RStudio

# RStudio > Extras pane > Packages tab > Update button
```

::: footer
Introduction to R
:::

## Importing and Exporting {.smaller}

::: {.columns .pv4}
::: {.column width="60%"}
-   Data is usually stored in [data files]{.b .green}
    -   Importing files into R is called [reading]{.b .blue}
    -   Exporting files from R is called [writing]{.b .blue}

::: {.fragment .mt1}
-   A convenient data file type is a CSV
    -   This stands for [comma-separated values]{.b .green}
    -   A CSV file is easy to share with other people
:::

::: {.fragment .mt1}
-   The [tidyverse]{.b .green} package can read/write CSVs
    -   Other packages can read/write other types
        (e.g., *readxl*, *haven*, *rio*, *googlesheets4*)
:::
:::

::: {.column .tc .pv5 width="40%"}
{{< li dhkykqke trigger=loop delay=3000 colors=secondary:#2a76dd class=rc >}}
:::
:::

::: footer
Introduction to R
:::

## Read/Write Live Coding

```{r}
#| echo: true
#| eval: false
#| error: true
#| code-line-numbers: false

# SETUP: Load the tidyverse package (if you haven't yet)

library(tidyverse)

# ==============================================================================

# USECASE: Read in a file containing data

my_data <- read_csv("jz2017.csv")
my_data

# NOTE: read_csv() will examine and guess the data type of each variable.
# You can tell it the data type of each variable, but that is more advanced.

# ==============================================================================

# USECASE: Write data back to a file

write_csv(my_data, file = "jz2017b.csv")

# NOTE: You can see the new file in Extras pane > Files tab.
# You can open the file in another program (e.g., Microsoft Excel).
# You can also email this file to someone else to share it.
```

::: footer
Introduction to R
:::

# Introduction to \{circumplex\}

